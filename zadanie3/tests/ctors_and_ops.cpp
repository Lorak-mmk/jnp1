#include <iostream>
#include <random>

#include "fibo.h"

const int TESTS = 10'000'000;
const int LIMIT = 1000;

int main(){
    
    //konstruktory
    
    short e = 1;
    unsigned short f = 1;
    int g = 1;
    unsigned int h = 1;
    long i = 1;
    unsigned long j = 1;
    long long k = 1;
    unsigned long long l = 1;
    
    Fibo f1, f2;
    
    f1 = Fibo(e);
    f1 = Fibo(f);
    f1 = Fibo(g);
    f1 = Fibo(h);
    f1 = Fibo(i);
    f1 = Fibo(j);
    f1 = Fibo(k);
    f1 = Fibo(l);
    
    f2 = Fibo(f1); //kopiujÄ…cy
    f2 = f1; //operator=
    
    f1 = Fibo("101010"); //char*
    f1 = Fibo(std::string("110001")); //string
    
    //Test operator<. Other are generated by boost from operator< and operator==, no need to test them.
    assert(2 < Fibo(3));
    assert(Fibo(2) < 3);
    assert(Fibo(2) < Fibo(3));
    
    assert(! (3 < Fibo(2)));
    assert(! (Fibo(3) < 2));
    assert(! (Fibo(3) < Fibo(2)));
    
    f1 = Fibo(10);
    f1 += f1;
    assert(f1 == Fibo(20));
    
    f1 = Fibo("1010");
    f1 |= f1;
    assert(f1 == Fibo("1010"));
    
    f1 = Fibo("1010");
    f1 &= f1;
    assert(f1 == Fibo("1010"));
    
    f1 = Fibo("1010");
    f1 ^= f1;
    assert(f1 == Zero());
    
    
    std::random_device dev;
    std::mt19937 rng(dev());
    std::uniform_int_distribution<std::mt19937::result_type> dist(0,LIMIT);
    for(int i = 0; i < TESTS; i++){
        int a = dist(rng);
        int b = dist(rng);
        assert((Fibo(a) < Fibo(b)) == (a < b));
        assert((Fibo(b) < Fibo(a)) == (b < a));
        assert((Fibo(a) > Fibo(b)) == (a > b));
        assert((Fibo(b) > Fibo(a)) == (b > a));
        assert((Fibo(a) <= Fibo(b)) == (a <= b));
        assert((Fibo(b) <= Fibo(a)) == (b <= a));
        assert((Fibo(a) >= Fibo(b)) == (a >= b));
        assert((Fibo(b) >= Fibo(a)) == (b >= a));
        assert((Fibo(a) == Fibo(b)) == (a == b));
    }
    
    std::cout << "OK\n";
    
}
