1. Trochę zmieniłem parsowanie pliku żeby było ładniej i elastyczniej
2. dodalem sprawdzanie niepoprawnych metadanych do File (np. "audio|key|content"

3.
//if (data.size() < 4UL) // TODO: czy coś co ma 2 nie jest poprawnym plikiem? np "|", plik o pustym typie, pustej treści i bez metedanych. Pusty plik też wsm jest poprawny, a ma size() == 1
//    throw FileException("corrupt file");

4.
auto foo = std::make_shared<VideoExtractor>();
extractor = std::static_pointer_cast<IMediaExtractor>(foo);

czy jest jakiś powód że robisz to w taki sposób zamiast

extractor - std::make_shared<VideoExtractor>();

zmieniam póki co, ale jeśli to ma jakieś uzasadnienie o którym nie wiem to się zmieni z powrotem

5. Trzeba wymyślić jakiś sposób na rejestrowanie nowych typów plików, bo teraz każdy nowy wymaga modyfikacji MediaFactory

6. Powydzielam Audio i Video do osobnych plików - bo tu raczej idea jest taka, że to są moduły, i jakby żeby pokazać że moóżna ich robić więcej bez modyfikacji istniejącego kodu

7. Czy to jest do czegoś potrzebne, ma jakieś uzasadnienie? virtual ~IMediaExtractor() = default;



nowe zmiany:
ad 1, 2, 3, 6 super
ad 7.  wyrzuciłem virtual ~IMediaExtractor() = default, nie wiedziałem wcześniej że bez tego zadziała.
ad 4. tutaj też nie wiedziałem że bez castowania zadziała, zmieniłem w player, ale tez extractory w audio i video.
ad throw exception if attrs don't exist, w audio i video - inicjuję attrs w kostruktorze, jeśli ni rzuci się wyjątek to
    attrs zawsze istnieje (choć może być puste, ale wtedy at() rzuci wyjątek)

dołożyłem łapanie wyjątków w playlist.cpp i sprawdzanie cyklu - psrawdzam tylko podczas play, może się zdarzyć że początkowo
playlista będzie mniałą cykl, ale potem po jakimś remove już nie - wtedy play powinien zadziałać normalnie
